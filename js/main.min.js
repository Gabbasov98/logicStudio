$("._tab").click(function() {
    let parentBlock = $(this).parents("._tabs-parent")
    let tabId = $(this).attr("data-tab")
    $(parentBlock).find("._tab").removeClass("_active")
    $(this).addClass("_active")
    $(parentBlock).find(".tab-content").removeClass("_active")
    $(parentBlock).find(`.${tabId}`).addClass("_active")
})

$(".burger").click(function () {
    $(".header").toggleClass("_open")
    $("body").toggleClass("fixed-body")
})


function inlineSlider() {
    var swiper = new Swiper('.inline-swiper .swiper-container', {
        slidesPerView: "auto",
        spaceBetween: 0,
        loop: true,
        allowTouchMove: false,
        autoplay: {
            delay: 3000,
            reverseDirection: true
        },
    })
}
inlineSlider()
$(function() {
    $('.m-btn')
        .on('mouseenter', function(e) {
            var parentOffset = $(this).offset(),
                relX = e.pageX - parentOffset.left,
                relY = e.pageY - parentOffset.top;
            $(this).find('._animate-span').css({top:relY, left:relX})
        })
        .on('mouseout', function(e) {
            var parentOffset = $(this).offset(),
                relX = e.pageX - parentOffset.left,
                relY = e.pageY - parentOffset.top;
            $(this).find('._animate-span').css({top:relY, left:relX})
        });
});

butter.init({cancelOnTouch: true});

gsapAnimation()


function gsapAnimation() {

    let header = document.querySelector(".header")
    let footer = document.querySelector(".footer")
    let indexPage = document.querySelector(".index-page")
    let worksPage = document.querySelector(".works-page")
    let workItemPage = document.querySelector(".work-item-page")
    let contactsPage = document.querySelector(".contacts-page")
    let servicePage = document.querySelector(".service-page")
    let aboutPage = document.querySelector(".about-page")
    if(header){
        headerAnim()
    }
    if(footer){
        footerAnim()
    }
    if(indexPage){
        indexAnim()
    }
    if(worksPage){
        worksPageAnim()
    }
    if(workItemPage){
        workItemPageAnim()
    }
    if(contactsPage){
        contactsPageAnim()
    }
    if(servicePage){
        servicePageAnim()
    }
    if(aboutPage){
        aboutPageAnim()
    }

    function headerAnim() {
        const tlHeader = gsap.timeline({})
        tlHeader.from(header, {
            y: -100,
            ease: "power4.out",
            duration: .3,
        })
    }
    function footerAnim() {
        const tlFooter = gsap.timeline({})
        tlFooter.from(footer, {
            y: 60,
            ease: "power4.out",
            duration: .3,
            scrollTrigger: {
                trigger: footer,
                start: 'top bottom',
                toggleActions: 'play none none reverse'
            }
        })
    }



    function indexAnim() {
        let title = document.querySelector(".main .m-title")
        let rows = title.querySelectorAll(".heading-line__cover")
        const tlMain = gsap.timeline({})

        tlMain.to(rows, {
            duration: 1.5,
            yPercent: -100,
            ease: "power4.out",
            stagger: 0.2,
        }).from(".main__desc", {
            delay: .5,
            duration: .5,
            opacity: 0,
        },'<').from(".main-counts", {
            duration: .75,
            opacity: 0,
        },'<').from(".main__nav", {
            duration: .75,
            opacity: 0,
        },'<').from(".main .portfolio-items", {
            duration: .35,
            opacity: 0,
            y: 100,
        },'<');

        portfolioCardsAnim()
        translateFadeAnim()
    }

    function worksPageAnim() {
        let title = document.querySelector(".works .h2")
        let rows = title.querySelectorAll(".heading-line__cover")
        const tlWorks = gsap.timeline({})

        tlWorks.to(rows, {
            delay: .2,
            duration: 1.5,
            yPercent: -100,
            ease: "power4.out",
            stagger: 0.2,
        }).from(".works .text-bg", {
            duration: .75,
            opacity: 0,
            yPercent: 100,
        },'<').from(".works .portfolio-items", {
            duration: .75,
            opacity: 0,
            y: 100,
        },'-=.5');

        portfolioCardsAnim()
    }

    function workItemPageAnim() {
        let title = document.querySelector(".works .h2")
        let rows = title.querySelectorAll(".heading-line__cover")
        const tlWorks = gsap.timeline({})

        tlWorks.to(rows, {
            delay: .2,
            duration: 1.5,
            yPercent: -100,
            ease: "power4.out",
            stagger: 0.2,
        }).from(".work-info__desc", {
            duration: .5,
            opacity: 0,
        },'-=.8').from(".work-info__site", {
            duration: .5,
            opacity: 0,
        },'<').from(".works .work-detail", {
            duration: .5,
            opacity: 0,
            y: 100,
        },'<');

        let workImages = Array.from(document.querySelectorAll('.work-detail__img'));
        workImages.forEach(card => {
            gsap.from(card, {
                y: 50,
                duration: .7,
                opacity: 0,
                scrollTrigger: {
                    trigger: card,
                    // start: 'top bottom',
                    toggleActions: 'play none none reverse'
                }
            })
        })
    }

    function contactsPageAnim() {
        let title = document.querySelector(".contacts .h2")
        let rows = title.querySelectorAll(".heading-line__cover")
        const tlWorks = gsap.timeline({})

        tlWorks.to(rows, {
            delay: .2,
            duration: 1.5,
            yPercent: -100,
            ease: "power4.out",
            stagger: 0.2,
        }).from(".contacts .text-bg", {
            duration: 1,
            opacity: 0,
            yPercent: 100,
        },'<').from(".contacts__bottom", {
            duration: 1,
            opacity: 0,
            y: 100,
        },'<');
    }

    function servicePageAnim() {
        let title = document.querySelector(".service-item .h2")
        let rows = title.querySelectorAll(".heading-line__cover")
        const tlService = gsap.timeline({})

        tlService.to(rows, {
            delay: .2,
            duration: 1.5,
            yPercent: -100,
            ease: "power4.out",
            stagger: 0.2,
        }).from(".service-item .text-bg", {
            duration: 1,
            opacity: 0,
            yPercent: 100,
        },'<').from(".service-item__desc", {
            duration: 1,
            opacity: 0,
            y: 100,
        },'<').from(".service-item__list", {
            duration: 1,
            opacity: 0,
            y: 100,
        },'<');

        let serviceItems = Array.from(document.querySelectorAll('.service-group'));
        serviceItems.forEach(card => {
            gsap.from(card, {
                y: 50,
                duration: .7,
                opacity: 0,
                scrollTrigger: {
                    trigger: card,
                    // start: 'top bottom',
                    toggleActions: 'play none none reverse'
                }
            })
        })
    }

    function aboutPageAnim() {
        let title = document.querySelector(".about .h2")
        let rows = title.querySelectorAll(".heading-line__cover")
        const tlService = gsap.timeline({})

        tlService.to(rows, {
            delay: .2,
            duration: 1.5,
            yPercent: -100,
            ease: "power4.out",
            stagger: 0.2,
        }).from(".about .text-bg", {
            duration: 1,
            opacity: 0,
            yPercent: 100,
        },'<').from(".service-item__desc", {
            duration: 1,
            opacity: 0,
            y: 100,
        },'<').from(".about__items", {
            duration: 1,
            opacity: 0,
            y: 100,
        },'<');

        let aboutItems = Array.from(document.querySelectorAll('.about-item'));
        aboutItems.forEach(card => {
            gsap.from(card, {
                y: 50,
                duration: .7,
                opacity: 0,
                scrollTrigger: {
                    trigger: card,
                    toggleActions: 'play none none reverse'
                }
            })
        })

        const tlSpecialization = gsap.timeline({
            scrollTrigger: {
                trigger: ".specialization",
                start: 'top bottom',
                toggleActions: 'play none none reverse'
            }
        })

        tlSpecialization.from(".specialization__title", {
            duration: .5,
            y: 50,
            opacity: 0,
        }).from(".specialization__desc", {
            duration: .3,
            y: 20,
            opacity: 0,
        }).from(".specialization__nav", {
            duration: .3,
            y: 20,
            opacity: 0,
        })
    }

    function portfolioCardsAnim() {
        let portfolioCards = Array.from(document.querySelectorAll('.portfolio-card'));
        portfolioCards.forEach(card => {
            gsap.from(card, {
                y: 50,
                opacity: 0,
                scrollTrigger: {
                    trigger: card,
                    start: 'top bottom',
                    toggleActions: 'play none none reverse'
                }
            })
        })
    }

    function translateFadeAnim() {
        let items = Array.from(document.querySelectorAll('._fade-translate'));
        if (items.length === 0) {
            return
        }
        items.forEach(item => {
            gsap.from(item, {
                y: 50,
                opacity: 0,
                scrollTrigger: {
                    trigger: item,
                    start: 'top bottom',
                    toggleActions: 'play none none reverse'
                }
            })
        })
    }
}


let numberItems = document.querySelectorAll("._number-animation")

window.odometerOptions = {
    format: 'd',
    duration: 3000,
    updateTime: 200,
    step: 1
};

numberItems.forEach(item => {
    let odometer = item.querySelector(".odometer");
    let num = +odometer.getAttribute("data-start")
    let num2 = +odometer.getAttribute("data-end")
    setTimeout(function(){
        item.classList.add('_show');
        odometer.innerHTML = num2;
    }, 100);
})

let fileInput = document.querySelector("[data-upload-id='file-input']")

if(fileInput){
    console.log(fileInput)
    const upload = new FileUploadWithPreview.FileUploadWithPreview('file-input');

    upload.options.multiple = true

    $(document).on('change', '.input-container input', function(e) {
        $(this).parents(".file-input").addClass("_uploaded")
    })

    $(document).on('click', '.image-preview-item-clear', function(e) {
        let count = $(this).parents(".file-input").find(".image-preview-item").length
        if(count === 1){
            $(this).parents(".file-input").removeClass("_uploaded")
        }
    })
}



let body = document.querySelector("body")
let modalTogglers = document.querySelectorAll("[data-modal]")
let modals = document.querySelectorAll(".modal")

modalTogglers.forEach(el => {
    el.onclick = function () {
        let modalId = el.getAttribute("data-modal")
        openModal(modalId)
    }
})

function closeModals() {
    modals.forEach(modal => {
        modal.classList.remove("_active")
        body.classList.remove("fixed-body2")
    })
}

function openModal(modalId) {
    closeModals()
    let modal = document.querySelector(`#${modalId}`)
    let closeButtons = modal.querySelectorAll(`._close-modal`)

    modal.classList.add("_active")
    body.classList.add("fixed-body2")


    closeButtons.forEach(btn => {
        btn.onclick = ()=> {
            modal.classList.remove("_active")
            body.classList.remove("fixed-body2")
        }
    })
}

var getScrollBarSize = (function() {
    var el = window.document.createElement('textarea'), style = {
        'visibility': 'hidden', 'position': 'absolute', 'zIndex': '-2147483647',
        'top': '-1000px', 'left': '-1000px', 'width': '1000px', 'height': '1000px',
        'overflow': 'scroll', 'margin': '0', 'border': '0', 'padding': '0'
    }, support = el.clientWidth !== undefined && el.offsetWidth !== undefined;

    for (var key in style) {
        if (style.hasOwnProperty(key)) {
            el.style[key] = style[key];
        }
    }

    return function() {
        var size = null;
        if (support && window.document.body) {
            window.document.body.appendChild(el);
            size = [el.offsetWidth - el.clientWidth, el.offsetHeight - el.clientHeight];
            window.document.body.removeChild(el);
        }

        document.documentElement.style.setProperty('--scrollWidth', `${size[0]}px`);
        return size;
    };
})();


window.addEventListener('DOMContentLoaded', () => {
    fix100vh();
    window.addEventListener('resize', () => {
        fix100vh();
        getScrollBarSize()
    })

    getScrollBarSize()

})

function fix100vh() {
    let vh = window.innerHeight * 0.01;
    document.documentElement.style.setProperty('--vh', `${vh}px`);
}

//# sourceMappingURL=../sourcemaps/main.min.js.map
